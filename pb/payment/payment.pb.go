// Code generated by protoc-gen-go. DO NOT EDIT.
// source: payment/payment.proto

package payment

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/lyft/protoc-gen-validate/validate"
	_ "go.emailer.com/pb/emailer"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeMembershipRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GatewayId            string   `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	MembershipId         string   `protobuf:"bytes,3,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	IsRecurring          bool     `protobuf:"varint,4,opt,name=is_recurring,json=isRecurring,proto3" json:"is_recurring,omitempty"`
	CardId               string   `protobuf:"bytes,5,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeMembershipRequest) Reset()         { *m = SubscribeMembershipRequest{} }
func (m *SubscribeMembershipRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeMembershipRequest) ProtoMessage()    {}
func (*SubscribeMembershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39aceed8019db, []int{0}
}

func (m *SubscribeMembershipRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeMembershipRequest.Unmarshal(m, b)
}
func (m *SubscribeMembershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeMembershipRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeMembershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeMembershipRequest.Merge(m, src)
}
func (m *SubscribeMembershipRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeMembershipRequest.Size(m)
}
func (m *SubscribeMembershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeMembershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeMembershipRequest proto.InternalMessageInfo

func (m *SubscribeMembershipRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SubscribeMembershipRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *SubscribeMembershipRequest) GetMembershipId() string {
	if m != nil {
		return m.MembershipId
	}
	return ""
}

func (m *SubscribeMembershipRequest) GetIsRecurring() bool {
	if m != nil {
		return m.IsRecurring
	}
	return false
}

func (m *SubscribeMembershipRequest) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

type Subscription struct {
	Id                    string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId                string               `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GatewayId             string               `protobuf:"bytes,3,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	GatewayCustomerId     string               `protobuf:"bytes,4,opt,name=gateway_customer_id,json=gatewayCustomerId,proto3" json:"gateway_customer_id,omitempty"`
	GatewaySubscriptionId string               `protobuf:"bytes,5,opt,name=gateway_subscription_id,json=gatewaySubscriptionId,proto3" json:"gateway_subscription_id,omitempty"`
	MembershipId          string               `protobuf:"bytes,6,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	IsRecurring           bool                 `protobuf:"varint,7,opt,name=is_recurring,json=isRecurring,proto3" json:"is_recurring,omitempty"`
	CardId                string               `protobuf:"bytes,8,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	ValidTill             *timestamp.Timestamp `protobuf:"bytes,9,opt,name=valid_till,json=validTill,proto3" json:"valid_till,omitempty"`
	SubscriptionStartDate *timestamp.Timestamp `protobuf:"bytes,10,opt,name=subscription_start_date,json=subscriptionStartDate,proto3" json:"subscription_start_date,omitempty"`
	CurrentPeriodStart    *timestamp.Timestamp `protobuf:"bytes,11,opt,name=current_period_start,json=currentPeriodStart,proto3" json:"current_period_start,omitempty"`
	CurrentPeriodEnd      *timestamp.Timestamp `protobuf:"bytes,12,opt,name=current_period_end,json=currentPeriodEnd,proto3" json:"current_period_end,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39aceed8019db, []int{1}
}

func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subscription) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Subscription) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *Subscription) GetGatewayCustomerId() string {
	if m != nil {
		return m.GatewayCustomerId
	}
	return ""
}

func (m *Subscription) GetGatewaySubscriptionId() string {
	if m != nil {
		return m.GatewaySubscriptionId
	}
	return ""
}

func (m *Subscription) GetMembershipId() string {
	if m != nil {
		return m.MembershipId
	}
	return ""
}

func (m *Subscription) GetIsRecurring() bool {
	if m != nil {
		return m.IsRecurring
	}
	return false
}

func (m *Subscription) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

func (m *Subscription) GetValidTill() *timestamp.Timestamp {
	if m != nil {
		return m.ValidTill
	}
	return nil
}

func (m *Subscription) GetSubscriptionStartDate() *timestamp.Timestamp {
	if m != nil {
		return m.SubscriptionStartDate
	}
	return nil
}

func (m *Subscription) GetCurrentPeriodStart() *timestamp.Timestamp {
	if m != nil {
		return m.CurrentPeriodStart
	}
	return nil
}

func (m *Subscription) GetCurrentPeriodEnd() *timestamp.Timestamp {
	if m != nil {
		return m.CurrentPeriodEnd
	}
	return nil
}

type CancelMembershipRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubscriptionId       string   `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelMembershipRequest) Reset()         { *m = CancelMembershipRequest{} }
func (m *CancelMembershipRequest) String() string { return proto.CompactTextString(m) }
func (*CancelMembershipRequest) ProtoMessage()    {}
func (*CancelMembershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39aceed8019db, []int{2}
}

func (m *CancelMembershipRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelMembershipRequest.Unmarshal(m, b)
}
func (m *CancelMembershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelMembershipRequest.Marshal(b, m, deterministic)
}
func (m *CancelMembershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelMembershipRequest.Merge(m, src)
}
func (m *CancelMembershipRequest) XXX_Size() int {
	return xxx_messageInfo_CancelMembershipRequest.Size(m)
}
func (m *CancelMembershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelMembershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelMembershipRequest proto.InternalMessageInfo

func (m *CancelMembershipRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CancelMembershipRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeMembershipRequest)(nil), "go.emailer.com.SubscribeMembershipRequest")
	proto.RegisterType((*Subscription)(nil), "go.emailer.com.Subscription")
	proto.RegisterType((*CancelMembershipRequest)(nil), "go.emailer.com.CancelMembershipRequest")
}

func init() { proto.RegisterFile("payment/payment.proto", fileDescriptor_66a39aceed8019db) }

var fileDescriptor_66a39aceed8019db = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0x93, 0x7c, 0x69, 0x33, 0xc9, 0x17, 0xc2, 0x94, 0x60, 0xe3, 0x82, 0x08, 0x61, 0x41,
	0xc4, 0xc2, 0xa9, 0x82, 0x84, 0x04, 0xcb, 0x96, 0x4a, 0x58, 0x02, 0xa9, 0x72, 0xba, 0x62, 0x63,
	0x8d, 0x3d, 0x97, 0x74, 0x84, 0xff, 0x3a, 0x33, 0x2e, 0xca, 0x96, 0xc7, 0x62, 0xc5, 0x8a, 0x17,
	0x40, 0xe2, 0x1d, 0xca, 0x13, 0xb0, 0x44, 0xe3, 0x9f, 0x26, 0x76, 0x1a, 0x22, 0xb1, 0x4a, 0x3c,
	0xe7, 0xdc, 0xa3, 0x7b, 0xae, 0xce, 0xbd, 0x68, 0x98, 0x90, 0x65, 0x08, 0x91, 0x9c, 0x16, 0xbf,
	0x56, 0xc2, 0x63, 0x19, 0xe3, 0xfe, 0x22, 0xb6, 0x20, 0x24, 0x2c, 0x00, 0x6e, 0xf9, 0x71, 0x68,
	0x1e, 0x2e, 0xe2, 0x78, 0x11, 0xc0, 0x34, 0x43, 0xbd, 0xf4, 0xe3, 0x14, 0xc2, 0x44, 0x2e, 0x73,
	0xb2, 0xf9, 0xb8, 0x0e, 0x4a, 0x16, 0x82, 0x90, 0x24, 0x4c, 0x0a, 0x82, 0x7e, 0x45, 0x02, 0x46,
	0x89, 0x84, 0x69, 0xf9, 0xa7, 0x00, 0xba, 0xfe, 0x05, 0xf9, 0x94, 0xe6, 0x1f, 0xe3, 0x9f, 0x1a,
	0x32, 0xe7, 0xa9, 0x27, 0x7c, 0xce, 0x3c, 0x78, 0x0f, 0xa1, 0x07, 0x5c, 0x5c, 0xb0, 0xc4, 0x81,
	0xcb, 0x14, 0x84, 0xc4, 0x63, 0xb4, 0x97, 0x0a, 0xe0, 0x2e, 0xa3, 0x86, 0x36, 0xd2, 0x26, 0x9d,
	0xe3, 0xce, 0xd7, 0xeb, 0x6f, 0xcd, 0x16, 0x6f, 0x0c, 0x34, 0xa7, 0xad, 0x10, 0x9b, 0xe2, 0x47,
	0x08, 0x2d, 0x88, 0x84, 0xcf, 0x64, 0xa9, 0x68, 0x0d, 0x45, 0x73, 0x3a, 0xc5, 0x8b, 0x4d, 0xb1,
	0x85, 0xfe, 0x0f, 0x6f, 0x74, 0x15, 0xa3, 0x59, 0x17, 0xea, 0xad, 0x70, 0x9b, 0xe2, 0x27, 0xa8,
	0xc7, 0x84, 0xcb, 0xc1, 0x4f, 0x39, 0x67, 0xd1, 0xc2, 0x68, 0x8d, 0xb4, 0xc9, 0xbe, 0xd3, 0x65,
	0xc2, 0x29, 0x9f, 0x54, 0x57, 0x3e, 0xe1, 0x54, 0x89, 0xfd, 0xb7, 0xd1, 0x95, 0x42, 0x6c, 0x3a,
	0xfe, 0xd1, 0x42, 0xbd, 0xc2, 0x58, 0x22, 0x59, 0x1c, 0xe1, 0x3e, 0x6a, 0x94, 0x2e, 0x9c, 0x06,
	0xa3, 0x58, 0x5f, 0x59, 0xcb, 0x7b, 0xbe, 0xdd, 0x4f, 0x73, 0xd3, 0xcf, 0x41, 0x09, 0xfb, 0xa9,
	0x90, 0x71, 0x98, 0x6b, 0xb4, 0x32, 0xde, 0xdd, 0x02, 0x3a, 0x29, 0x10, 0x9b, 0xe2, 0x97, 0x48,
	0x2f, 0xf9, 0x62, 0xad, 0x9f, 0x9b, 0xe6, 0x9d, 0x61, 0x01, 0xaf, 0x77, 0x6b, 0x53, 0xfc, 0xb4,
	0x3e, 0xb7, 0x76, 0xc6, 0xfe, 0xfb, 0xb0, 0xf6, 0x36, 0x87, 0xa5, 0xaf, 0x86, 0xb5, 0x9f, 0xfb,
	0xcc, 0x27, 0x84, 0x5f, 0x21, 0x94, 0x25, 0xc3, 0x95, 0x2c, 0x08, 0x8c, 0xce, 0x48, 0x9b, 0x74,
	0x67, 0xa6, 0x95, 0xc7, 0xca, 0x2a, 0x63, 0x65, 0x9d, 0x97, 0xb1, 0x72, 0x3a, 0x19, 0xfb, 0x9c,
	0x05, 0x01, 0x76, 0x90, 0x5e, 0xf1, 0x22, 0x24, 0xe1, 0xd2, 0x55, 0x19, 0x33, 0xd0, 0x4e, 0x9d,
	0xe1, 0x7a, 0xe9, 0x5c, 0x55, 0xbe, 0x21, 0x12, 0xf0, 0x3b, 0x74, 0x4f, 0xb5, 0x0c, 0x91, 0x74,
	0x13, 0xe0, 0x2c, 0xa6, 0xb9, 0xaa, 0xd1, 0xdd, 0x29, 0x88, 0x8b, 0xba, 0xb3, 0xac, 0x2c, 0x53,
	0xc4, 0x6f, 0x11, 0xae, 0xa9, 0x41, 0x44, 0x8d, 0xde, 0x4e, 0xad, 0x41, 0x45, 0xeb, 0x34, 0xa2,
	0xaf, 0xbb, 0xbf, 0xaf, 0x8f, 0xb4, 0x2f, 0xbf, 0x8e, 0x9a, 0x22, 0xf5, 0xc6, 0x97, 0x48, 0x3f,
	0x21, 0x91, 0x0f, 0xc1, 0xbf, 0xad, 0xca, 0x0c, 0xdd, 0xa9, 0x67, 0xa0, 0x51, 0xe7, 0xf6, 0x45,
	0x25, 0x07, 0xb3, 0xef, 0x1a, 0xea, 0x9f, 0xe5, 0x77, 0x62, 0x0e, 0xfc, 0x8a, 0xf9, 0x80, 0x5d,
	0x74, 0x70, 0xcb, 0xce, 0xe2, 0xe7, 0x56, 0xf5, 0x80, 0x58, 0xdb, 0x17, 0xdb, 0x7c, 0xb8, 0x85,
	0x9b, 0xef, 0xca, 0x1c, 0x0d, 0xea, 0x36, 0xf1, 0xb3, 0x7a, 0xc5, 0x96, 0x41, 0x98, 0xf7, 0x37,
	0xc6, 0x7b, 0xaa, 0xee, 0xd6, 0xf1, 0xe1, 0x87, 0x07, 0x55, 0x85, 0x69, 0xe2, 0x95, 0x17, 0xd0,
	0x6b, 0x67, 0xe4, 0x17, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x97, 0x71, 0x23, 0x63, 0x1b, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	SubscribeMembership(ctx context.Context, in *SubscribeMembershipRequest, opts ...grpc.CallOption) (*Subscription, error)
	CancelMembership(ctx context.Context, in *CancelMembershipRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) SubscribeMembership(ctx context.Context, in *SubscribeMembershipRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/go.emailer.com.PaymentService/SubscribeMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CancelMembership(ctx context.Context, in *CancelMembershipRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/go.emailer.com.PaymentService/CancelMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	SubscribeMembership(context.Context, *SubscribeMembershipRequest) (*Subscription, error)
	CancelMembership(context.Context, *CancelMembershipRequest) (*empty.Empty, error)
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_SubscribeMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SubscribeMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.emailer.com.PaymentService/SubscribeMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SubscribeMembership(ctx, req.(*SubscribeMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CancelMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CancelMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.emailer.com.PaymentService/CancelMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CancelMembership(ctx, req.(*CancelMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.emailer.com.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeMembership",
			Handler:    _PaymentService_SubscribeMembership_Handler,
		},
		{
			MethodName: "CancelMembership",
			Handler:    _PaymentService_CancelMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/payment.proto",
}
