// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: card/card.proto

package card

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on UserCardInformation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserCardInformation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for GatewayId

	// no validation rules for CustomerId

	for idx, item := range m.GetCards() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserCardInformationValidationError{
					field:  fmt.Sprintf("Cards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserCardInformationValidationError is the validation error returned by
// UserCardInformation.Validate if the designated constraints aren't met.
type UserCardInformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCardInformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCardInformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCardInformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCardInformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCardInformationValidationError) ErrorName() string {
	return "UserCardInformationValidationError"
}

// Error satisfies the builtin error interface
func (e UserCardInformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCardInformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCardInformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCardInformationValidationError{}

// Validate checks the field values on Card with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Card) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CardId

	// no validation rules for CardType

	// no validation rules for LastFour

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for ExpireOn

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	// no validation rules for Metadata

	return nil
}

// CardValidationError is the validation error returned by Card.Validate if the
// designated constraints aren't met.
type CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardValidationError) ErrorName() string { return "CardValidationError" }

// Error satisfies the builtin error interface
func (e CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardValidationError{}

// Validate checks the field values on UserCardList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserCardList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUserCards() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserCardListValidationError{
					field:  fmt.Sprintf("UserCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserCardListValidationError is the validation error returned by
// UserCardList.Validate if the designated constraints aren't met.
type UserCardListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCardListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCardListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCardListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCardListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCardListValidationError) ErrorName() string { return "UserCardListValidationError" }

// Error satisfies the builtin error interface
func (e UserCardListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCardList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCardListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCardListValidationError{}

// Validate checks the field values on CardIdentifier with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CardIdentifier) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return CardIdentifierValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCardId()) < 1 {
		return CardIdentifierValidationError{
			field:  "CardId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for GatewayId

	return nil
}

// CardIdentifierValidationError is the validation error returned by
// CardIdentifier.Validate if the designated constraints aren't met.
type CardIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardIdentifierValidationError) ErrorName() string { return "CardIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e CardIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardIdentifierValidationError{}

// Validate checks the field values on AddCardReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddCardReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return AddCardReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for GatewayId

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		return AddCardReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// AddCardReqValidationError is the validation error returned by
// AddCardReq.Validate if the designated constraints aren't met.
type AddCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCardReqValidationError) ErrorName() string { return "AddCardReqValidationError" }

// Error satisfies the builtin error interface
func (e AddCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCardReqValidationError{}

// Validate checks the field values on UpdateCardReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateCardReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCardReqValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		return UpdateCardReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UpdateCardReqValidationError is the validation error returned by
// UpdateCardReq.Validate if the designated constraints aren't met.
type UpdateCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCardReqValidationError) ErrorName() string { return "UpdateCardReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCardReqValidationError{}

// Validate checks the field values on UpdateCardRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateCardRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CardId

	return nil
}

// UpdateCardResValidationError is the validation error returned by
// UpdateCardRes.Validate if the designated constraints aren't met.
type UpdateCardResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCardResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCardResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCardResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCardResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCardResValidationError) ErrorName() string { return "UpdateCardResValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCardResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCardRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCardResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCardResValidationError{}
